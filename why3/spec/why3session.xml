<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="2" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="spec.mlw"/>
<theory name="KeyServer">
 <goal name="state&#39;VC" expl="VC for state" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="62"/></proof>
 </goal>
 <goal name="init&#39;VC" expl="VC for init" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="init&#39;VC.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="init&#39;VC.0.0" expl="VC for init" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="20"/></proof>
   </goal>
   <goal name="init&#39;VC.0.1" expl="VC for init" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="10"/></proof>
   </goal>
   <goal name="init&#39;VC.0.2" expl="VC for init" proved="true">
   <proof prover="2"><result status="valid" time="0.00" steps="20"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="getExisting&#39;VC" expl="VC for getExisting" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="getExisting&#39;VC.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="86"/></proof>
  </goal>
  <goal name="getExisting&#39;VC.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="getExisting&#39;VC.1.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="getExisting&#39;VC.1.0.0" expl="postcondition" proved="true">
    <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="2.98" steps="7411"/></proof>
    </goal>
    <goal name="getExisting&#39;VC.1.0.1" expl="postcondition" proved="true">
    <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.01" steps="14"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="getExisting&#39;VC.1.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="getExisting&#39;VC.1.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="12"/></proof>
    </goal>
    <goal name="getExisting&#39;VC.1.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="39"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="requestAdd&#39;VC" expl="VC for requestAdd">
 </goal>
</theory>
<theory name="Implem" proved="true">
 <goal name="concrete_state&#39;VC" expl="VC for concrete_state" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="165"/></proof>
 </goal>
 <goal name="init&#39;VC" expl="VC for init" proved="true">
 <proof prover="2" timelimit="5"><result status="valid" time="0.03" steps="154"/></proof>
 </goal>
 <goal name="get&#39;VC" expl="VC for get" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get&#39;VC.0" expl="exceptional postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="get&#39;VC.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="get&#39;VC.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
